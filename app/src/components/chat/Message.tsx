"use client";
import React from "react";
import Image from "next/image";

interface MessageData {
  id: string;
  role: "user" | "assistant";
  content: string;
  type: "text" | "image";
  imageUrl?: string;
  timestamp: Date;
}

interface MessageProps {
  message: MessageData;
}

export function Message({ message }: MessageProps) {
  const isUser = message.role === "user";
  const isImage = message.type === "image";

  return (
    <div className={`flex items-start gap-3 ${isUser ? "justify-end" : "justify-start"}`}>
      {/* AI Avatar - only show for assistant messages */}
      {!isUser && (
        <div className="w-8 h-8 bg-muted rounded-full flex items-center justify-center flex-shrink-0">
          <span className="text-sm font-bold">AI</span>
        </div>
      )}

      {/* Message Content */}
      <div className={`max-w-2xl ${isUser ? "order-first" : ""}`}>
        <div
          className={`rounded-lg p-3 ${
            isUser
              ? "bg-primary text-primary-foreground ml-auto"
              : "bg-muted"
          }`}
        >
          {isImage && message.imageUrl ? (
            <div className="space-y-2">
              <p className="text-sm">{message.content}</p>
              <div className="relative w-full max-w-md">
                <Image
                  src={message.imageUrl}
                  alt="Generated image"
                  width={400}
                  height={400}
                  className="rounded-lg w-full h-auto"
                />
                <div className="text-xs text-muted-foreground mt-1">
                  Image generated by GPT-Image-1
                </div>
              </div>
            </div>
          ) : (
            <p className="text-sm whitespace-pre-wrap">{message.content}</p>
          )}
        </div>
        
        {/* Timestamp */}
        <div className={`text-xs text-muted-foreground mt-1 ${isUser ? "text-right" : "text-left"}`}>
          {message.timestamp.toLocaleTimeString([], { 
            hour: '2-digit', 
            minute: '2-digit' 
          })}
        </div>
      </div>

      {/* User Avatar - only show for user messages */}
      {isUser && (
        <div className="w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0">
          <span className="text-sm font-bold text-primary-foreground">U</span>
        </div>
      )}
    </div>
  );
}
