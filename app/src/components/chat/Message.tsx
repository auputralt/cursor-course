"use client";
import React, { useState } from "react";
import Image from "next/image";
import { MessageData } from "@/types/chat";
import { ImageModal } from "./ImageModal";

interface MessageProps {
  message: MessageData;
}

export function Message({ message }: MessageProps) {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const isUser = message.role === "user";
  const isImage = message.type === "image";

  const handleImageClick = () => {
    if (message.imageUrl) {
      setIsModalOpen(true);
    }
  };

  return (
    <div className={`flex items-start gap-3 ${isUser ? "justify-end" : "justify-start"}`}>
      {/* AI Avatar - only show for assistant messages */}
      {!isUser && (
        <div className="w-8 h-8 bg-gray-700 rounded-full flex items-center justify-center flex-shrink-0">
          <span className="text-sm font-bold text-white">AI</span>
        </div>
      )}

      {/* Message Content */}
      <div className={`max-w-2xl ${isUser ? "order-first" : ""}`}>
        <div
          className={`rounded-lg p-3 ${
            isUser
              ? "bg-gray-700 text-white ml-auto"
              : "bg-gray-800 text-white"
          }`}
        >
          {isImage && message.imageUrl ? (
            <div className="space-y-2">
              <p className="text-sm">{message.content}</p>
              <div className="relative w-full max-w-md">
                {/* Clickable image */}
                <img
                  src={message.imageUrl}
                  alt={message.role === "user" ? "Uploaded image" : "Generated image"}
                  className="rounded-lg w-full h-auto max-w-md cursor-pointer hover:opacity-90 transition-opacity"
                  onClick={handleImageClick}
                  onError={(e) => {
                    console.error('Image load error:', e);
                    console.error('Image URL:', message.imageUrl);
                  }}
                  onLoad={() => {
                    console.log('Image loaded successfully:', message.imageUrl);
                  }}
                />
                <div className="text-xs text-gray-400 mt-1">
                  {message.role === "user" ? "Uploaded image" : "Image generated by DALL-E 3 - Click to view full size"}
                </div>
              </div>
            </div>
          ) : (
            <p className="text-sm whitespace-pre-wrap">{message.content}</p>
          )}
        </div>
        
        {/* Timestamp */}
        <div className={`text-xs text-gray-400 mt-1 ${isUser ? "text-right" : "text-left"}`}>
          {message.timestamp.toLocaleTimeString([], { 
            hour: '2-digit', 
            minute: '2-digit' 
          })}
        </div>
      </div>

      {/* User Avatar - only show for user messages */}
      {isUser && (
        <div className="w-8 h-8 bg-gray-600 rounded-full flex items-center justify-center flex-shrink-0">
          <span className="text-sm font-bold text-white">U</span>
        </div>
      )}

      {/* Image Modal */}
      {isImage && message.imageUrl && (
        <ImageModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          imageUrl={message.imageUrl}
          prompt={message.content}
        />
      )}
    </div>
  );
}
